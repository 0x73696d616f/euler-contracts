// SPDX-License-Identifier: GPL-2.0-or-later

pragma solidity ^0.8.0;

import "./SwapHandlerPayloadBase.sol";

/// @notice Swap handler executing trades on Uniswap with a payload generated by auto-router
contract SwapHandlerUniAutoRouter is SwapHandlerPayloadBase {
    constructor(address uniSwapRouter02) SwapHandlerPayloadBase(uniSwapRouter02) {}

    function swapPrimary(SwapParams memory params, bytes memory payload) override internal returns (uint) {
        setMaxAllowance(params.underlyingIn, params.amountIn, uniSwapRouter02);

        (bool success, bytes memory result) = uniSwapRouter02.call(payload);
        if (!success) revertBytes(result);

        uint amount;

        if (result.length == 32) {
            amount = abi.decode(result, (uint));
        } else {
            bytes[] memory results = abi.decode(result, (bytes[]));
            for (uint256 i = 0; i < results.length; ++i) {
                amount += abi.decode(results[i], (uint));
            }
        }

        return amount;
    }
}
